import sys
import subprocess
import re
import time
import requests

def main():

    print("Dependency Name | Current Dependency Version | CVE ID | Fix version")
    print()
    path_of_files = "C:/Users/shamr/Documents/pythonProjectNSO"
    with open(f"{path_of_files}/result.txt", 'w') as file:
        file.write("")
    type_of_project = sys.argv[1]
    type_of_file = sys.argv[2]
    file_path = sys.argv[3]

    with open(file_path, 'r') as file:
        file_lines = file.readlines()

    dependencies_and_version = {}
    in_dependency = False

    # extracting the dependency and it's version from the file
    for line in file_lines:
        if type_of_project == "-r":
            if "==" in line:
                line = line.split('==')
                dependencies_and_version[line[0]] = line[1].split('\n')[0]
        elif type_of_project == "-p":
            if "dependencies" in line:
                in_dependency = True
            elif in_dependency:
                if ':' in line:
                    line = line.replace('"', '')
                    line = line.replace(",", '')
                    line = line.split(": ")
                    dependencies_and_version[line[0].strip()] = line[1].split('\n')[0]
            if '}' in line and in_dependency:
                in_dependency = False

    for dependency in dependencies_and_version.keys():
        # entering the dependency and version in the file
        if type_of_project == '-r':
            with open(f"{path_of_files}/{type_of_file}", 'w') as file:
                file.write("")
                file.write(f"{dependency}=={dependencies_and_version[dependency]}")
        elif type_of_project == '-p':
            with open(f"{path_of_files}/{type_of_file}", 'w') as file:
                file.seek(0)
                file.write("")
                file.write(f'''
{{
    "dependencies": {{
        "{dependency}": "{dependencies_and_version[dependency]}"
    }}
}}
''')

        # extracting data about dependency
        # ================================

        command = f"snyk test --file={path_of_files}/{type_of_file} > {path_of_files}/result.txt"
        process = subprocess.Popen(['cmd', '/k', command])

        with open(f"{path_of_files}/result.txt", 'r') as file:
            while True:
                file_lines = file.readlines()
                if file_lines != []:
                    break
                file.seek(0)

        process.kill()

        time.sleep(5)

        with open(f"{path_of_files}/result.txt", 'w') as file:
            file.write("")

        # finding the fix version
        # =======================

        line_with_info = ""
        # finding the line where the fix version is
        for line in file_lines:
            if "Upgrade" in line:
                line_with_info = line
                break
        # extracting the fix version
        if line_with_info == "":
            continue

        index = [m.start() for m in re.finditer('@', line_with_info)][-1]
        fix_version = line_with_info[index + 1:].split()[0]

        # finding the CVEs IDs
        # ====================

        cves = []
        for line in file_lines:
            # extracting the url
            if "https" in line and dependency.upper() in line.upper():
                index = line.find("https")
                url = line[index:].split(']')[0]
                response = requests.get(url)
                response = response.text
                # finding the cve id in the page
                indexes = [m.start() for m in re.finditer('id=CVE', response)]
                for index in indexes:
                    cves.append(response[index+3: index + 20].split('"')[0])
        first_line = True
        for cve in cves:
            if first_line:
                print(f"{dependency} | {dependencies_and_version[dependency]} | {cve} | {fix_version}")
                first_line = False
            else:
                print(f"{len(dependency) * ' '} | {len(dependencies_and_version[dependency]) * ' '} | {cve} | {len(fix_version) * ' '}")
        print()



if __name__ == "__main__":
    main()